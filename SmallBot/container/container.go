package container

import (
	"SmallBot/env"
	"SmallBot/handlers"
	"SmallBot/integration/bybit"
	"SmallBot/logger"
	"SmallBot/services"
	"SmallBot/types"
	"context"
	"fmt"
	"strconv"
)

type Container struct {
	BybitClient  bybit.Client
	BybitService types.BybitServiceInterface
	wsHandler    *handlers.BybitWebSocketHandler
}

func NewContainer() *Container {
	recvWindow, _ := strconv.Atoi(env.GetBybitRecvWindow())
	apiMode := env.GetBybitApiMode()
	apiUrl := env.GetBybitApiUrl()
	bybitClient := bybit.NewClient(apiUrl, recvWindow, apiMode == "test")

	// –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—ë–º bybitService —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º nil wsHandler
	var bybitService *services.BybitService
	bybitService = services.NewBybitService(bybitClient, nil)

	// –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞—ë–º wsHandler, –ø–µ—Ä–µ–¥–∞–≤–∞—è bybitService
	wsHandler := handlers.NewBybitWebSocketHandler(bybitService)
	bybitService.SetWebSocketHandler(wsHandler)

	symbol := env.GetSymbol()
	ctx := context.Background()
	if env.GetCancelOrdersOnStart() {
		// –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
		logger.LogWarn("‚ö†Ô∏è  –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –≤–∫–ª—é—á–µ–Ω–∞!")

		// –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä–∞
		cancelled, err := bybitService.CancelAllOrders(ctx, symbol)
		if err != nil {
			logger.LogError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–æ–≤ %s: %v", symbol, err)
		} else {
			logger.LogInfo("–í—Å–µ –æ—Ä–¥–µ—Ä–∞ %s —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω—ã. –û—Ç–º–µ–Ω–µ–Ω–æ: %v", symbol, cancelled)
		}
	} else {
		logger.LogInfo("‚úì –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
		orders, err := bybitService.GetOpenOrders(ctx, symbol, nil, 50)

		if err != nil {
			logger.LogError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: %v", err)
		} else if len(orders.List) > 0 {
			logger.LogWarn("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ %d –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è %s", len(orders.List), symbol)
			for _, order := range orders.List {
				logger.LogInfo("  - OrderID: %s, Side: %s, Price: %s, Qty: %s, Status: %s",
					order.OrderID, order.Side, order.Price, order.Qty, order.OrderStatus)
			}
		}
	}

	return &Container{
		BybitClient:  bybitClient,
		BybitService: bybitService,
		wsHandler:    wsHandler,
	}
}

func (c *Container) StartBackgroundTasks(ctx context.Context) {
	go c.BybitService.StartWebSocket(ctx)
	go c.BybitService.StartPrivateWebSocket(ctx)
}

func (c *Container) Close() error {
	if env.GetCancelOrdersOnShutdown() {
		ctx := context.Background()

		logger.LogInfo("üõë –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏...")

		symbol := env.GetSymbol()
		cancelled, err := c.BybitService.CancelAllOrders(ctx, symbol)
		if err != nil {
			logger.LogError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–æ–≤ %s: %v", symbol, err)
			return fmt.Errorf("failed to cancel orders: %w", err)
		}

		logger.LogInfo("‚úì –í—Å–µ –æ—Ä–¥–µ—Ä–∞ %s —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏. –û—Ç–º–µ–Ω–µ–Ω–æ: %v", symbol, cancelled)

	} else {
		logger.LogWarn("‚ö†Ô∏è  –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –û—Ä–¥–µ—Ä–∞ –æ—Å—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏!")
	}

	return nil
}
