Торговые стратегии для бота
1. Сеточная торговля

Цель: Прибыль от колебаний цены в узком диапазоне.
Логика: Размещает сетку лимитных ордеров на покупку/продажу вокруг текущей цены. После исполнения создаёт противоположный ордер.
Параметры:
Шаг сетки (% от цены).
Количество уровней.
Размер ордера.
Адаптивность: Шаг и границы корректируются по волатильности.

2. Скальпинг на основе волатильности

Цель: Прибыль от движений цены с учётом комиссий и волатильности.
Логика: Покупка ниже текущей цены, продажа при достижении целевой прибыли (комиссия + волатильность × множитель).
Параметры:
entry_offset_percent: Смещение цены покупки (%).
profit_multiplier: Множитель прибыли от волатильности.
order_size_percent: Доля баланса (%).
Адаптивность: Целевая прибыль зависит от волатильности.

3. Спред-скальпинг

Цель: Прибыль от спреда между bid и ask.
Логика: Размещает лимитный ордер на покупку выше bid или продажу ниже ask, если спред ≥ порога и прибыль ≥ минимальной.
Параметры:
min_spread_percent: Минимальный спред (% от цены, например, 0.02%).
profit_margin: Минимальная прибыль (например, 0.1 USDT).
quantity_percent: Доля баланса для ордера (например, 10%).
Адаптивность: Параметры корректируются по цене, балансу и характеристикам инструмента.

Реализация

Данные: Тикеры и ордербуки из Redis, волатильность из Analytics.
Ордера: Лимитные, размещаются через ByBit API с rate limiting.
Логи: Сделки сохраняются в trade_logs.
Мониторинг: Отслеживание через Prometheus, уведомления о сбоях.

Логика в Strategies:
Читает тиковые цены и ордербуки из Redis (tickers:{symbol}, orderbook:{symbol}).
Запрашивает метрики волатильности у Analytics через HTTP.
Размещает/отменяет ордера через ByBit API с учётом rate limiting (хранится в Redis: ratelimit:{user_id}:orders).
Логирует сделки в trade_logs через PostgreSQL.

Аналитика:
Analytics рассчитывает волатильность (например, ATR), скользящие средние и объёмы на основе данных из Redis.
Сохраняет сигналы (например, "высокая волатильность") в PostgreSQL для аудита.

Хранение параметров
INSERT INTO strategy_params (user_strategy_id, param_name, param_value, created_at, updated_at)
VALUES 
    ('<uuid>', 'grid_step_percent', '{"value": 0.5}', NOW(), NOW()),
    ('<uuid>', 'grid_levels', '{"value": 5}', NOW(), NOW()),
    ('<uuid>', 'order_size', '{"value": 0.001}', NOW(), NOW());
